# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.amount import Amount  # noqa: F401,E501
from swagger_server import util


class License(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, dig_allowed: Amount=None, dig_used: Amount=None):  # noqa: E501
        """License - a model defined in Swagger

        :param id: The id of this License.  # noqa: E501
        :type id: int
        :param dig_allowed: The dig_allowed of this License.  # noqa: E501
        :type dig_allowed: Amount
        :param dig_used: The dig_used of this License.  # noqa: E501
        :type dig_used: Amount
        """
        self.swagger_types = {
            'id': int,
            'dig_allowed': Amount,
            'dig_used': Amount
        }

        self.attribute_map = {
            'id': 'id',
            'dig_allowed': 'digAllowed',
            'dig_used': 'digUsed'
        }
        self._id = id
        self._dig_allowed = dig_allowed
        self._dig_used = dig_used

    @classmethod
    def from_dict(cls, dikt) -> 'License':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The license of this License.  # noqa: E501
        :rtype: License
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this License.


        :return: The id of this License.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this License.


        :param id: The id of this License.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def dig_allowed(self) -> Amount:
        """Gets the dig_allowed of this License.


        :return: The dig_allowed of this License.
        :rtype: Amount
        """
        return self._dig_allowed

    @dig_allowed.setter
    def dig_allowed(self, dig_allowed: Amount):
        """Sets the dig_allowed of this License.


        :param dig_allowed: The dig_allowed of this License.
        :type dig_allowed: Amount
        """
        if dig_allowed is None:
            raise ValueError("Invalid value for `dig_allowed`, must not be `None`")  # noqa: E501

        self._dig_allowed = dig_allowed

    @property
    def dig_used(self) -> Amount:
        """Gets the dig_used of this License.


        :return: The dig_used of this License.
        :rtype: Amount
        """
        return self._dig_used

    @dig_used.setter
    def dig_used(self, dig_used: Amount):
        """Sets the dig_used of this License.


        :param dig_used: The dig_used of this License.
        :type dig_used: Amount
        """
        if dig_used is None:
            raise ValueError("Invalid value for `dig_used`, must not be `None`")  # noqa: E501

        self._dig_used = dig_used
